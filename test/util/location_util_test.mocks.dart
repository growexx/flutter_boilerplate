// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_boilerplate/test/util/location_util_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i4;
import 'package:flutter_boilerplate/util/location_utils/location_utils.dart'
    as _i2;
import 'package:geolocator/geolocator.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocationUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationUtils extends _i1.Mock implements _i2.LocationUtils {
  @override
  _i3.Future<bool> handleLocationPermission(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleLocationPermission,
          [context],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i5.Position?> getCurrentPosition(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [context],
        ),
        returnValue: _i3.Future<_i5.Position?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.Position?>.value(),
      ) as _i3.Future<_i5.Position?>);
  @override
  _i3.Future<String> getAddressFromLatLng(_i5.Position? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromLatLng,
          [position],
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}

// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_boilerplate/test/view/screens/drawer_navigation_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i4;
import 'package:flutter_boilerplate/app_manager/enum/button_status.dart'
    as _i10;
import 'package:flutter_boilerplate/app_manager/theme/theme_provider.dart'
    as _i8;
import 'package:flutter_boilerplate/authentication/user.dart' as _i3;
import 'package:flutter_boilerplate/authentication/user_repository.dart' as _i5;
import 'package:flutter_boilerplate/view_model/signin_view_model.dart' as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingController_2 extends _i1.SmartFake
    implements _i4.TextEditingController {
  _FakeTextEditingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i5.UserRepository {
  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  set client(_i2.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set currentUser(_i3.User? _currentUser) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          _currentUser,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.User get getUser => (super.noSuchMethod(
        Invocation.getter(#getUser),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#getUser),
        ),
        returnValueForMissingStub: _FakeUser_1(
          this,
          Invocation.getter(#getUser),
        ),
      ) as _i3.User);
  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<dynamic> updateUserData(_i3.User? userData) => (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [userData],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  void changePassword(_i4.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<dynamic> signOutUser(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #signOutUser,
          [context],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> directLogOut(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #directLogOut,
          [context],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<bool?> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i6.Future<bool?>.value(),
        returnValueForMissingStub: _i6.Future<bool?>.value(),
      ) as _i6.Future<bool?>);
  @override
  _i6.Future<dynamic> updateToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #updateToken,
          [token],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i8.ThemeProvider {
  @override
  _i4.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i4.ThemeMode.system,
        returnValueForMissingStub: _i4.ThemeMode.system,
      ) as _i4.ThemeMode);
  @override
  set themeMode(_i4.ThemeMode? _themeMode) => super.noSuchMethod(
        Invocation.setter(
          #themeMode,
          _themeMode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set setThemeMode(_i4.ThemeMode? val) => super.noSuchMethod(
        Invocation.setter(
          #setThemeMode,
          val,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SignInViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSigninViewModel extends _i1.Mock implements _i9.SignInViewModel {
  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  set client(_i2.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isRememberMeChecked => (super.noSuchMethod(
        Invocation.getter(#isRememberMeChecked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isRememberMeChecked(bool? _isRememberMeChecked) => super.noSuchMethod(
        Invocation.setter(
          #isRememberMeChecked,
          _isRememberMeChecked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.TextEditingController get emailC => (super.noSuchMethod(
        Invocation.getter(#emailC),
        returnValue: _FakeTextEditingController_2(
          this,
          Invocation.getter(#emailC),
        ),
        returnValueForMissingStub: _FakeTextEditingController_2(
          this,
          Invocation.getter(#emailC),
        ),
      ) as _i4.TextEditingController);
  @override
  _i4.TextEditingController get passwordC => (super.noSuchMethod(
        Invocation.getter(#passwordC),
        returnValue: _FakeTextEditingController_2(
          this,
          Invocation.getter(#passwordC),
        ),
        returnValueForMissingStub: _FakeTextEditingController_2(
          this,
          Invocation.getter(#passwordC),
        ),
      ) as _i4.TextEditingController);
  @override
  bool get getRememberMe => (super.noSuchMethod(
        Invocation.getter(#getRememberMe),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i10.ButtonStatus get loginStatus => (super.noSuchMethod(
        Invocation.getter(#loginStatus),
        returnValue: _i10.ButtonStatus.initial,
        returnValueForMissingStub: _i10.ButtonStatus.initial,
      ) as _i10.ButtonStatus);
  @override
  set loginStatus(_i10.ButtonStatus? val) => super.noSuchMethod(
        Invocation.setter(
          #loginStatus,
          val,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set setRememberMe(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #setRememberMe,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<_i3.User?> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i3.User?>.value(),
        returnValueForMissingStub: _i6.Future<_i3.User?>.value(),
      ) as _i6.Future<_i3.User?>);
  @override
  void signInWithOTP(_i4.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #signInWithOTP,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
